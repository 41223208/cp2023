<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite</a></p>
<h1>w5</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;
  
// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
  
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);
  
    return 0;
}</pre>
<p>clear<img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<p>cd downloads</p>
<p>cc gnuplot_ex1.c</p>
<p>./a.out</p>
<p></p>
<p></p>
<h1>w6</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// cc roc_flag.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue
    // red rectangle area
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // blue rectangle area
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 目前僅畫出青天白日的輪廓直線, 請嘗試計算所需的點座標完成國旗繪圖
    draw_white_sun(img, center_x, center_y, sun_radius, white);
}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    float angle = 0;
    int fromX, fromY;
    int toX, toY;
    for (int i=0; i&lt;24; i++){
        angle += 5*M_PI*2/12;
        //printf("%.3f", angle);
        toX = center_x + cos(angle)*sun_radius;
        toY = center_y + sin(angle)*sun_radius;
        // 只有 i 為 0 時移動到 toX, toY, 其餘都進行直線繪圖
        if (i!=0){
            gdImageLine(img, fromX, fromY, toX, toY, color);
        }
        fromX = toX;
        fromY = toY;
   }
}</pre>
<p><img alt="" height="267" src="/images/roc_flag.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 国旗颜色
    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹
    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // 星星大小

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距
    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距
    int star_start_x = (int)(0.125 * height); // 星星的起始X位置
    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;

        // 计算2、4、6和8排星星的偏移量
        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;

        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x + offset_x;

            // 旋转角度（以弧度为单位）
            double rotation_angle = M_PI / 5; // 忘記多少度的旋转

            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white, rotation_angle);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // 用指定的颜色填充星星
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><img alt="" height="211" src="/images/usa_flag.png" width="400"/></p>
<h1>w7</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_chinese_flag(gdImagePtr img);

int main() {
    int width = 300; // 國旗寬度
    int height = 200; // 國旗高度

    gdImagePtr im = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(im, 0);

    draw_chinese_flag(im);

    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }

    gdImagePngEx(im, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(im);

    return 0;
}

// 声明 draw_star 函数
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

void draw_chinese_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, yellow;

    // 國旗顏色
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景
    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星

    // 畫紅色背景
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 設置星星的大小和位置
    int star_size = (int)(0.28 * height);
    int star_x = (int)(0.165 * width);
    int star_y = (int)(0.265 * height);

    // 畫大星星
    draw_star(img, star_x, star_y, star_size, yellow, 11.0);

    // 繪製小星星，位置根據實際國旗比例計算
    double radius = 0.15 * height;
    double angle = 360 / 7 * M_PI / 179.0;
    double rotation = -M_PI / 7.5;
    int cx = (int)(0.32 * width);
    int cy = (int)(0.27 * height);

    for (int i = -1; i &lt; 3; i++) {
        int x = (int)(cx + radius * cos(i * angle + rotation));
        int y = (int)(cy + radius * sin(i * angle + rotation));
        draw_star(img, x, y, 19, yellow, M_PI / 5.0);
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    // 计算星形的五个外点和五个内点
    double outer_radius = size / 2;
    double inner_radius = size / 6;
    double angle = M_PI / 5.0;

    for (int i = 0; i &lt; 10; i++) {
        double radius = (i % 2 == 0) ? outer_radius : inner_radius;
        double theta = rotation_angle + i * angle;
        points[i].x = x + radius * cos(theta);
        points[i].y = y + radius * sin(theta);
    }

    // 使用 gdImageFilledPolygon 绘制星形
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><img alt="" height="267" src="/images/proc_flag.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );

int main() {
    // width 3: height 2
    int width = 1200;
    int height = 2 * width / 3;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_japan_flag(img);

    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white ;
    int center_x =  0.5 * width;
    int center_y =  0.5 * height;
    int sun_radius = 145 ;

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes


    // 繪製白色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, white);


    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p><img alt="" height="267" src="/images/japan_flag.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);

int main() {
    // 设置国旗的宽和高
    int width = 1200;
    int height = width / 2;

    // 创建图像
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    // 绘制英国国旗
    draw_uk_flag(img);

    // 将图像保存到文件
    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时发生错误。\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}



void draw_uk_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);

    int red, white, blue;
    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色

    gdImageFilledRectangle(img, 0, 0, width, height, blue);


  int x1, y1, x2, y2, x3, y3;
  {
    int line_thickness = 100;
    gdImageSetThickness(img, line_thickness);

    int x1, y1, x2, y2, x3, y3;

    // 绘制白色斜线
    x1 = 0;
    y1 = 600;
    x2 = 1200;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, white);

    x1 = 0;
    y1 = 0;
    x2 = 1200;
    y2 = 600;
    gdImageLine(img, x1, y1, x2, y2, white);
}
  {
    int line_thickness = 33;
    gdImageSetThickness(img, line_thickness);


    // 绘制红色斜线
    x1 = 566;
    y1 = 300;
    x2 = 1166;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 1233;
    y1 = 600;
    x2 = 633;
    y2 = 300;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 566;
    y1 = 300;
    x2 = -33;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 600;
    y1 = 316.5;
    x2 = 0;
    y2 = 616.5;
    gdImageLine(img, x1, y1, x2, y2, red);
  }
  {
  int line_thickness = 33;
  gdImageSetThickness(img, line_thickness);

  int x1, y1, x2, y2, x3, y3;

  // 绘制  斜线
  x1 = 0;
  y1 = 600;
  x2 = 1200;
  y2 = 0;
  gdImageLine(img, x1, y1, x2, y2, red );


  x1 = 1200;
    y1 = 16.5;
    x2 = 600;
    y2 = 316.5;
    gdImageLine(img, x1, y1, x2, y2, white);


  x1 = 0;
    y1 = 583.5;
    x2 = 600;
    y2 = 283.5;
    gdImageLine(img, x1, y1, x2, y2, white);


  }

    // 绘制白色十字
    int cross_width = width / 32;
    int cross_arm_width = width / 32;
    int center_x = width / 2;
    int center_y = height / 2;

    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);

    // 绘制红色十字
    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
} </pre>
<p><img alt="" height="200" src="/images/uk_flag.png" width="400"/></p>
<p></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

#define WIDTH 900
#define HEIGHT 600
#define FILENAME "south_korea_flag.png"

int main() {
    gdImagePtr im;
    FILE *pngout;
    int white, black, red, blue;

    im = gdImageCreate(WIDTH, HEIGHT);

    white = gdImageColorAllocate(im, 255, 255, 255);
    black = gdImageColorAllocate(im, 0, 0, 0);
    red = gdImageColorAllocate(im, 205, 0, 0);
    blue = gdImageColorAllocate(im, 0, 56, 168);

    // Background (white)
    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);

    // Blue Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);

    // Red Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);

  int circleX = 385;    // 圓心的 X 座標
  int circleY = 262.5;   // 圓心的 Y 座標
  int circleRadius = 75;     

  // 繪製圓形
  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);

  int circleX2 = 515;    // 圓心的 X 座標

 int circleY2 = 337.5;

  // 繪製圓形
  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);

  {


  // 起點和終點位置

  int startX = 340;    
  // 線的起點 X 座標

  int startY = 90;   
  // 線的起點 Y 座標

  int endX = 200;     
  // 線的終點 X 座標

  int endY = 260;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 270;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 210;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);

  gdImageSetThickness(im, lineWidth +12);
gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);
}
  {
    // 起點和終點位置

  int startX = 330;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 190;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }

  {
    // 起點和終點位置

  int startX = 564;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 704;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);

gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 400, 734, 490, white);

  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);
  }
  {
    // 起點和終點位置

  int startX = 330;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 190;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }
  {
    // 起點和終點位置

  int startX = 564;    
  // 線的起點 X 座標

  int startY = 97;   
  // 線的起點 Y 座標

  int endX = 704;     
  // 線的終點 X 座標

  int endY = 267;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 212, 734, 118, white);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);

  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 277;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 217;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);

    gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);

  }

    // Save image
FILE *outputFile = fopen("./../images/korea_flag.png", "wb");
if (outputFile == NULL) {
    fprintf(stderr, "Error opening the output file.\n");
    return 1;
}
  gdImagePngEx(im, outputFile, 9);
      fclose(outputFile);
      gdImageDestroy(im);
      return 0;
  }</pre>
<p><br/><img alt="" height="267" src="/images/korea_flag.png" width="400"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/國旗影片.mp4" type="video/mp4"/></video></p>
<h1>HW1</h1>
<h2>練習1</h2>
<h3>1.輸入數字判斷高於平均身高或低於平均身高或處於平均</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;   // 包含標準輸入/輸出頭文件。

void main()
{
    float PerHeight;   // 宣告一個浮點數變數 'PerHeight' 來儲存人的身高。

    printf("輸入人的身高（以厘米為單位）：");   // 提示用戶輸入身高（以厘米為單位）。
    scanf("%f", &amp;PerHeight);   // 讀取並將用戶的輸入存儲在 'PerHeight' 中。

    if (PerHeight &lt; 150.0)   // 檢查 'PerHeight' 是否小於 150.0。
        printf("這個人是矮子。\n");   // 印出一條消息，指示這個人是矮子。
    else if ((PerHeight &gt;= 150.0) &amp;&amp; (PerHeight &lt; 165.0))   // 檢查 'PerHeight' 是否介於 150.0 和 165.0 之間。
        printf("這個人身高屬於平均水平。\n");   // 印出一條消息，指示這個人身高屬於平均水平。
    else if ((PerHeight &gt;= 165.0) &amp;&amp; (PerHeight &lt;= 195.0))   // 檢查 'PerHeight' 是否介於 165.0 和 195.0 之間。
        printf("這個人是較高的。\n");   // 印出一條消息，指示這個人身高較高。
    else
        printf("身高異常。\n");   // 印出一條消息，指示身高異常。
}
</pre>
<p><img alt="" height="345" src="/images/螢幕擷取畫面 2023-12-14 130047.png" width="400"/></p>
<h3>2.輸入攝氏度轉換華氏度</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;     // 包含標準輸入/輸出頭文件。

float temp_f;     /* 華氏度 */
float temp_c;     /* 攝氏度 */
char line_text[50];        /* 一行輸入 */

int main() {
    printf("輸入溫度（攝氏度）：");  // 提示用戶輸入攝氏溫度。
    fgets(line_text, sizeof(line_text), stdin);      // 從用戶讀取一行輸入並存儲在 'line_text' 中。
    sscanf(line_text, "%f", &amp;temp_c);               // 將 'line_text' 中的輸入轉換為浮點數並存儲在 'temp_c' 中。

    temp_f = ((9.0 / 5.0) * temp_c) + 32.0;         // 將攝氏溫度轉換為華氏溫度並存儲在 'temp_f' 中。
    printf("%f degrees Fahrenheit.\n", temp_f);    // 以華氏度打印溫度。

    return(0);   // 返回0以表示程序成功執行。
}
</pre>
<p><img alt="" height="315" src="/images/螢幕擷取畫面 2023-12-14 666.png" width="400"/></p>
<h3>3.用C語言函數獲取當前時間</h3>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#define __STDC_WANT_LIB_EXT1__ 1/這一行是一個預處理器指令，用來啟用C標準庫的擴展功能。在這裡，它啟用了擴展函數 ctime_s
#include &lt;time.h&gt;/這裡包含了標準的時間頭文件，其中包含了一些與時間相關的函數和結構。
#include &lt;stdio.h&gt; /這裡包含了標準的輸入/輸出頭文件，以便使用 printf 函數輸出信息。

int main(void)/這是程序的主函數的開始
{
    time_t result = time(NULL);/使用 time 函數獲取當前的時間，返回的結果存儲在 result 變數中。
    printf("\n%s\n", ctime(&amp;result));/ 使用 ctime 函數將時間轉換為可讀的字符串格式，並通過 printf 函數打印出來。
#ifdef __STDC_LIB_EXT1__/這是一個條件編譯指令，用於檢查是否支持標準庫的擴展功能。
    char time_str[26];
    ctime_s(time_str,sizeof time_str,&amp;result);/如果支持擴展功能，則使用 ctime_s 函數將時間轉換為可讀的字符串格式，並將結果存儲在 time_str 中。
    printf("\n%s\n", time_str);/通過 printf 函數打印使用 ctime_s 轉換後的時間字符串。
#endif
}</pre>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)"><img alt="" height="247" src="/images/螢幕擷取畫面 2023-12-14 777.png" width="400"/></a></p>
<h3>4.用 C 語言寫一個程式來列印目前日期和時間</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;time.h&gt;
#include &lt;stdio.h&gt;  
#include &lt;stdlib.h&gt;

int main(void)
{
    time_t cur_time;         // 定義一個 time_t 型變數 cur_time 來存儲當前時間。
    char* cur_t_string;      // 定義一個指向字符的指針 cur_t_string，用來存儲轉換後的時間字符串。

    cur_time = time(NULL);   // 使用 time 函數獲取當前時間，並將其存儲在 cur_time 變數中。

    if (cur_time == ((time_t)-1))
    {
        // 如果獲取當前時間失敗，輸出錯誤信息並以失敗的狀態退出程序。
        (void) fprintf(stderr, "無法獲取當前日期和時間。\n");
        exit(EXIT_FAILURE);
    }

    cur_t_string = ctime(&amp;cur_time); // 將 cur_time 中的時間轉換為本地時間格式，並將結果存儲在 cur_t_string 中。

    if (cur_t_string == NULL)
    {
        // 如果轉換時間失敗，輸出錯誤信息並以失敗的狀態退出程序。
        (void) fprintf(stderr, "無法轉換當前日期和時間。\n");
        exit(EXIT_FAILURE);
    }

    // 通過 printf 函數輸出轉換後的時間字符串。
    (void) printf("\n當前時間為：%s\n", cur_t_string);

    // 退出程序，表示成功執行。
    exit(EXIT_SUCCESS);
}
</pre>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)"><img alt="" height="191" src="/images/螢幕擷取畫面 2023-12-14 888.png" width="400"/></a></p>
<h3>5.輸入名字、姓氏及出生年份</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;    // 包含標準輸入/輸出頭文件。

int main() {
    char firstname[20], lastname[20];   // 宣告用於存儲名字和姓氏的字符數組，每個最大大小為20個字符。
    int bir_year;   // 宣告一個整數變數 'bir_year' 來存儲出生年份。

    printf("輸入您的名字：");   // 提示用戶輸入他們的名字。
    scanf("%s", firstname);   // 讀取並將用戶的輸入存儲在 'firstname' 中。

    printf("輸入您的姓氏：");   // 提示用戶輸入他們的姓氏。
    scanf("%s", lastname);   // 讀取並將用戶的輸入存儲在 'lastname' 中。

    printf("輸入您的出生年份：");   // 提示用戶輸入他們的出生年份。
    scanf("%d", &amp;bir_year);   // 讀取並將用戶的輸入存儲在 'bir_year' 中。

    printf("%s %s %d\n", firstname, lastname, bir_year);   // 打印名字、姓氏和出生年份。

    return 0;   // 返回0以表示程序成功執行。
}
</pre>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)"><img alt="" height="396" src="/images/螢幕擷取畫面 2023-12-14 999.png" width="400"/></a></p>
<h3>6.檢查數字是否為醜數</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false"># include &lt;stdio.h&gt;
# include &lt;string.h&gt;

int main()
{
    int n, x = 0;
    printf("\n\n 檢查一個給定數字是否是醜數：\n");
    printf("----------------------------------------------------\n");
    printf("輸入一個整數數字：");
    scanf("%d", &amp;n);

    if (n &lt;= 0) {  
        printf("輸入正確的數字。");  
    }

    while (n != 1) 
    {  
        if (n % 5 == 0) 
        {  
            n /= 5;  
        } 
        else if (n % 3 == 0) 
        {  
            n /= 3;  
        } 
        else if (n % 2 == 0) 
        {  
            n /= 2;  
        } 
        else 
        {  
            printf("它不是一個醜數。\n"); 
            x = 1;  
            break;  
        }  
    } 

    if (x == 0) 
    { 
        printf("它是一個醜數。\n");
    }
    
    return 0;
}
</pre>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)"><img alt="" height="429" src="/images/螢幕擷取畫面 2023-12-14 000.png" width="400"/></a></p>
<p><br/>7.<span>將公里每小時轉換為英哩每小時</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;     // 包含標準輸入/輸出頭文件。
float kmph;              /* 每小時公里數 */
float miph;              /* 每小時英里數（將要計算的） */
char  line_text[50];      /* 來自鍵盤的一行輸入 */

int main()
{
    printf("輸入每小時公里數：");   // 提示用戶輸入每小時公里數。
    fgets(line_text, sizeof(line_text), stdin);   // 從用戶讀取一行輸入並將其存儲在 'line_text' 中。
    sscanf(line_text, "%f", &amp;kmph);   // 將輸入轉換為浮點數並存儲在 'kmph' 中。

    miph = (kmph * 0.6213712);   // 將每小時公里數轉換為每小時英里數。
    printf("%f 英里每小時\n", miph);   // 將結果以英里每小時打印出來。

    return 0;   // 返回0以表示程序成功執行。
}
</pre>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)"><img alt="" height="343" src="/images/螢幕擷取畫面 2023-12-14 555.png" width="400"/></a></p>
<h3>8.顯示兩個整數變量</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main(void)
{
    int m = 10, n, o;
    int *z = &amp;m;

    printf("\n\n 指針：展示指針的基本聲明：\n");
    printf("-------------------------------------------------------\n");
    printf(" 這裡有 m=10，n 和 o 是兩個整數變量，*z 是一個整數\n");
    printf("\n\n z 存儲 m 的地址 = %p\n", z); // z 是一個指針，所以 %p 會印出地址
    printf("\n *z 存儲 m 的值 = %i\n", *z);
    printf("\n &amp;m 是 m 的地址 = %p\n", &amp;m); // &amp;m 給出整數變量 m 的地址，所以 %p 是對應的格式符號
    printf("\n &amp;n 存儲 n 的地址 = %p\n", &amp;n);
    printf("\n &amp;o 存儲 o 的地址 = %p\n", &amp;o);
    printf("\n &amp;z 存儲 z 的地址 = %p\n\n", &amp;z); // &amp;z 給出指針 z 的存儲地址，仍然是一個地址，%p 是正確的格式符號
}
</pre>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)"><img alt="" height="383" src="/images/螢幕擷取畫面 2023-12-14 444.png" width="400"/></a></p>
<h3>9.輸入1-10的整數查看哪個為正確</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;     // 包含標準輸入/輸出頭文件。
#include&lt;stdlib.h&gt;    // 包含標準庫頭文件。
#include&lt;time.h&gt;      // 包含時間頭文件，用於生成隨機數。

int main ()           // 主函數的開始。
{
    int number, input;   // 宣告兩個整數變數 'number' 和 'input'。

    srand ( time(NULL) );   // 使用當前時間初始化隨機種子。

    number = rand() % 10 + 1;   // 生成一個介於1和10之間的隨機數並存儲在 'number' 中。

    do {   // 開始一個do-while循環。
        printf ("\n猜測數字（1到10）：");   // 輸出提示用戶猜測數字的消息。
        scanf ("%d", &amp;input);    // 讀取用戶的輸入並存儲在 'input' 中。

        if (number &gt; input)   // 如果隨機數大於用戶的輸入。
            printf ("該數字較大\n");   // 輸出消息指示該數字較大。

    } while (number != input);   // 只要用戶的輸入不等於隨機數，就繼續循環。

    printf ("答對了！\n\n");   // 輸出消息指示用戶猜對了。

    return 0;   // 返回0以表示程序成功執行。
}   // 主函數的結尾。
</pre>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)"><img alt="" height="289" src="/images/螢幕擷取畫面 2023-12-14 222.png" width="400"/></a></p>
<h3>10.輸入任意數的平方</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

double square(double num)
{
    return (num * num);
}

int main()
{
    int num;
    double n;

    printf("\n\n 函數：計算任意數的平方 :\n");
    printf("------------------------------------------------\n");	

    printf("輸入任意數以計算平方 : ");
    scanf("%d", &amp;num);

    n = square(num);
    printf("%d 的平方是 : %.2f\n", num, n); 

    return 0;
}
</pre>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)"><img alt="" height="361" src="/images/螢幕擷取畫面 2023-12-14 111.png" width="400"/></a></p>
<p><video controls="controls" height="630" poster="/images/練習1.mp4" width="1008">
<source src="/images/練習1.mp4" type="video/mp4"/></video></p>
<p></p>
<h2>練習2</h2>
<h3>1.(||)運算元傳回值與 (&amp;&amp;) 一樣, 但不同的是, 當 (||) 運算元兩邊的運算子之值都為 0 時, 則會傳回 0, 否則傳回 1</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
   邏輯或運算子。
==================== */
#include &lt;stdio.h&gt;

void main()
{
    printf("%d\n", 1 || 0);
    printf("%d\n", 0 || 0);
    printf("%d\n", 2 || 2);
}
</pre>
<p><img alt="" height="497" src="/images/1.png" width="400"/></p>
<h3>2.sizeof( type ) 取得特定型別的 size</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
   sizeof 的範例。
==================== */
#include &lt;stdio.h&gt;

void main()
{
    char a;
    printf("int 的大小為 %d \n", sizeof(int));
    printf("char a 的大小為 %d \n", sizeof(a));
}
</pre>
<p><img alt="" height="330" src="/images/2.png" width="400"/></p>
<h3>3.C 有3個邏輯運算元, 基本上常與條件判斷運算合用</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
   邏輯非運算子。
==================== */
#include &lt;stdio.h&gt;

void main()
{
    int a;
    a = 3;
    printf("%d\n", !a);
    a = 0;
    printf("%d\n", !a);
}
</pre>
<p><img alt="" height="454" src="/images/3.png" width="400"/></p>
<h3>4.位元運算元</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
   位元運算子的範例。
==================== */
#include&lt;stdio.h&gt;

void main()
{
    int a, b;
    a = 15;
    b = 1;

    printf("%d \n", a | b ); /* a OR b */
    printf("%d \n", a &amp; b ); /* a AND b */
    printf("%d \n", a ^ b ); /* a XOR b */
    printf("%d \n", a &lt;&lt; 1 ); /* a 位元左移 1 位 */
    printf("%d \n", a &gt;&gt; 1 ); /* a 位元右移一位 */
    printf("%d \n", ~a ); /* A 的補數運算 */
}
</pre>
<p><img alt="" height="470" src="/images/4.png" width="400"/></p>
<h3>5.關係運算元 </h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
   關係運算子的範例。
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int a = 10, b = 5;

    printf(" a == b 是 %d \n", a == b);
    printf(" a &gt; b 是 %d \n", a &gt; b);
    printf(" a &lt; b 是 %d \n", a &lt; b);
    printf(" a &gt;= b 是 %d \n", a &gt;= b);
    printf(" a &lt;= b 是 %d \n", a &lt;= b);
    printf(" a != b 是 %d \n", a != b);

    printf("\n");

    b = 10;

    printf(" a == b 是 %d \n", a == b);
    printf(" a &gt; b 是 %d \n", a &gt; b);
    printf(" a &lt; b 是 %d \n", a &lt; b);
    printf(" a &gt;= b 是 %d \n", a &gt;= b);
    printf(" a &lt;= b 是 %d \n", a &lt;= b);
    printf(" a != b 是 %d \n", a != b);

    return 0;
}
</pre>
<p><img alt="" height="525" src="/images/5.png" width="400"/></p>
<h3>6.算術運算元</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
   基本運算範例。
==================== */
#include&lt;stdio.h&gt;

int main()
{
    int a, b;
    a = 10; 
    b = 3;

    printf("%d \n", a * b );  /* 乘法 */
    printf("%d \n", a / b );  /* 除法 */
    printf("%d \n", a + b );  /* 加法 */
    printf("%d \n", a - b );  /* 減法 */
    printf("%d \n", a % b );  /* 取餘數 */

    return 0;
}
</pre>
<p><img alt="" height="297" src="/images/6.png" width="400"/></p>
<h3>7.C 的基本型態 </h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
   變數宣告的例子 2。
==================== */
int main()
{
    /* 變數宣告 */
    int a;
    int A;
    int b, c;

    a = 1;
    A = 8;
    b = 2;
    c = A - a + b; /* 先計算 A - a + b，將結果傳回給 c */
    printf("%d", c); /* 使用 printf 印出 c 這個整數型態的變數 */

    return 0;
}
</pre>
<p><img alt="" height="245" src="/images/7.png" width="400"/></p>
<h3>8.C 的基本型態 </h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
   變數宣告的例子 3。
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int a = 1;
    int A = 8;
    int b = 2, c;

    c = A - a + b;

    /* 輸出 a, A, b, c 到螢幕 */
    printf("a = %d, A = %d, b = %d, c = %d ", a, A, b, c);

    return 0;
}
</pre>
<p><img alt="" height="162" src="/images/8.png" width="400"/></p>
<h3>9.C 的浮點數</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
    float a = 0.5;
    double b = 1.2;
    int c = 3;

    b = b + a + c;

    /* 輸出 a, b, c 到螢幕 */
    printf(" a = %3.1f, b = %3.1f, c = %d ", a, b, c);
}
</pre>
<p><img alt="" height="339" src="/images/9.png" width="400"/></p>
<h3>10.C 的輸出與輸入的函數</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* =========================
   輸入一個整數
========================= */
#include &lt;stdio.h&gt;

int main()
{
    int i;
    printf("輸入一個整數:");
    scanf("%d", &amp;i); /* 在變數 i 的前面加上 &amp;（位址運算元） */
    printf("輸入的數字是 %d", i);

    return 0;
}
</pre>
<p><img alt="" height="189" src="/images/10.png" width="400"/></p>
<p><video controls="controls" height="630" poster="/images/練習2.mp4" width="1008">
<source src="/images/練習2.mp4" type="video/mp4"/></video></p>
<h1>w11</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
int main() {
    int width = 800;
    int height = 600;
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    FILE *outputFile = fopen("hellogd.png", "wb");
    if (outputFile == NULL) {
 
fprintf(stderr, "Error opening the output file.\n");
 
return 1;
    }
 
    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);
    // 長方形塗色
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);
    // 橢圓形塗色
    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);
    // 橢圓形畫線
    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);
    // 畫直線
    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);
 
    // 多邊形畫線
    gdPoint points[4];
    points[0].x = (int)width/4;
    points[0].y = (int)height*3/4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);
 
    // 多邊形塗色
    gdPoint points2[4];
    points2[0].x = (int)width/3;
    points2[0].y = (int)height/2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
    gdImageFilledPolygon(img, points2, 4, red);
 
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p><img alt="" height="300" src="/images/hellogd.png" width="400"/></p>
<h1>w13</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }

    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time

    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;

        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

        t += dt;
    }

    // Close the data file
    fclose(outputFile);

    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");

    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);

    return 0;
}</pre>
<h6 style="text-align: left;"><a href="https://en.wikipedia.org/wiki/Python_(programming_language)"><img alt="" height="200" src="/images/motion_plot.png" width="400"/></a></h6>
<h1>Brython</h1>
<h6><a href="https://en.wikipedia.org/wiki/Python_(programming_language)"><strong>https://en.wikipedia.org/wiki/Python_(programming_language)</strong></a></h6>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>