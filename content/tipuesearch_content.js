var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite \n', 'tags': '', 'url': 'About.html'}, {'title': 'w5', 'text': '// 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n  \n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n  \n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n  \n    return 0;\n} \n clear \n cd downloads \n cc gnuplot_ex1.c \n ./a.out \n \n \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// cc roc_flag.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./../images/roc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    int sun_radius = (int)(width/8);\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n    // red rectangle area\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // blue rectangle area\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n    // 目前僅畫出青天白日的輪廓直線, 請嘗試計算所需的點座標完成國旗繪圖\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n    float angle = 0;\n    int fromX, fromY;\n    int toX, toY;\n    for (int i=0; i<24; i++){\n        angle += 5*M_PI*2/12;\n        //printf("%.3f", angle);\n        toX = center_x + cos(angle)*sun_radius;\n        toY = center_y + sin(angle)*sun_radius;\n        // 只有 i 為 0 時移動到 toX, toY, 其餘都進行直線繪圖\n        if (i!=0){\n            gdImageLine(img, fromX, fromY, toX, toY, color);\n        }\n        fromX = toX;\n        fromY = toY;\n   }\n} \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nint main() {\n    int width = 800;\n    int height = (int)(width / 1.9);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_usa_flag(img);\n\n    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n\n    return 0;\n}\n\nvoid draw_usa_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 国旗颜色\n    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹\n    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形\n\n    int stripe_height = height / 13;\n    int stripe_width = width;\n    int star_size = (int)(0.0308 * height); // 星星大小\n\n    for (int y = 0; y < height; y += stripe_height) {\n        if (y / stripe_height % 2 == 0) {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n        } else {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n        }\n    }\n\n    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n\n    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距\n    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距\n    int star_start_x = (int)(0.125 * height); // 星星的起始X位置\n    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置\n\n    for (int row = 0; row < 9; row++) {\n        int starsPerRow = (row % 2 == 0) ? 6 : 5;\n\n        // 计算2、4、6和8排星星的偏移量\n        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\n\n        for (int star = 0; star < starsPerRow; star++) {\n            int x = star_start_x + star * star_spacing_x + offset_x;\n\n            // 旋转角度（以弧度为单位）\n            double rotation_angle = M_PI / 5; // 忘記多少度的旋转\n\n            int y = star_start_y + row * star_spacing_y;\n            draw_star(img, x, y, star_size, white, rotation_angle);\n        }\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    for (int i = 0; i < 10; i++) {\n        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;\n        int radius = (i % 2 == 0) ? size : size / 2;\n        points[i].x = x + radius * cos(angle);\n        points[i].y = y + radius * sin(angle);\n    }\n\n    // 用指定的颜色填充星星\n    gdImageFilledPolygon(img, points, 10, color);\n} \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_chinese_flag(gdImagePtr img);\n\nint main() {\n    int width = 300; // 國旗寬度\n    int height = 200; // 國旗高度\n\n    gdImagePtr im = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(im, 0);\n\n    draw_chinese_flag(im);\n\n    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(im, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(im);\n\n    return 0;\n}\n\n// 声明 draw_star 函数\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nvoid draw_chinese_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, yellow;\n\n    // 國旗顏色\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\n    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n\n    // 畫紅色背景\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 設置星星的大小和位置\n    int star_size = (int)(0.28 * height);\n    int star_x = (int)(0.165 * width);\n    int star_y = (int)(0.265 * height);\n\n    // 畫大星星\n    draw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\n    // 繪製小星星，位置根據實際國旗比例計算\n    double radius = 0.15 * height;\n    double angle = 360 / 7 * M_PI / 179.0;\n    double rotation = -M_PI / 7.5;\n    int cx = (int)(0.32 * width);\n    int cy = (int)(0.27 * height);\n\n    for (int i = -1; i < 3; i++) {\n        int x = (int)(cx + radius * cos(i * angle + rotation));\n        int y = (int)(cy + radius * sin(i * angle + rotation));\n        draw_star(img, x, y, 19, yellow, M_PI / 5.0);\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    // 计算星形的五个外点和五个内点\n    double outer_radius = size / 2;\n    double inner_radius = size / 6;\n    double angle = M_PI / 5.0;\n\n    for (int i = 0; i < 10; i++) {\n        double radius = (i % 2 == 0) ? outer_radius : inner_radius;\n        double theta = rotation_angle + i * angle;\n        points[i].x = x + radius * cos(theta);\n        points[i].y = y + radius * sin(theta);\n    }\n\n    // 使用 gdImageFilledPolygon 绘制星形\n    gdImageFilledPolygon(img, points, 10, color);\n} \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_japan_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = 2 * width / 3;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_japan_flag(img);\n\n    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_japan_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white ;\n    int center_x =  0.5 * width;\n    int center_y =  0.5 * height;\n    int sun_radius = 145 ;\n\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n\n\n    // 繪製白色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n\n\n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);\n} \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n\nint main() {\n    // 设置国旗的宽和高\n    int width = 1200;\n    int height = width / 2;\n\n    // 创建图像\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    // 绘制英国国旗\n    draw_uk_flag(img);\n\n    // 将图像保存到文件\n    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时发生错误。\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\n\n\nvoid draw_uk_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n\n    int red, white, blue;\n    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色\n\n    gdImageFilledRectangle(img, 0, 0, width, height, blue);\n\n\n  int x1, y1, x2, y2, x3, y3;\n  {\n    int line_thickness = 100;\n    gdImageSetThickness(img, line_thickness);\n\n    int x1, y1, x2, y2, x3, y3;\n\n    // 绘制白色斜线\n    x1 = 0;\n    y1 = 600;\n    x2 = 1200;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n    x1 = 0;\n    y1 = 0;\n    x2 = 1200;\n    y2 = 600;\n    gdImageLine(img, x1, y1, x2, y2, white);\n}\n  {\n    int line_thickness = 33;\n    gdImageSetThickness(img, line_thickness);\n\n\n    // 绘制红色斜线\n    x1 = 566;\n    y1 = 300;\n    x2 = 1166;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 1233;\n    y1 = 600;\n    x2 = 633;\n    y2 = 300;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 566;\n    y1 = 300;\n    x2 = -33;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 600;\n    y1 = 316.5;\n    x2 = 0;\n    y2 = 616.5;\n    gdImageLine(img, x1, y1, x2, y2, red);\n  }\n  {\n  int line_thickness = 33;\n  gdImageSetThickness(img, line_thickness);\n\n  int x1, y1, x2, y2, x3, y3;\n\n  // 绘制  斜线\n  x1 = 0;\n  y1 = 600;\n  x2 = 1200;\n  y2 = 0;\n  gdImageLine(img, x1, y1, x2, y2, red );\n\n\n  x1 = 1200;\n    y1 = 16.5;\n    x2 = 600;\n    y2 = 316.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  x1 = 0;\n    y1 = 583.5;\n    x2 = 600;\n    y2 = 283.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  }\n\n    // 绘制白色十字\n    int cross_width = width / 32;\n    int cross_arm_width = width / 32;\n    int center_x = width / 2;\n    int center_y = height / 2;\n\n    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\n    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n\n    // 绘制红色十字\n    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\n    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n}  \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n#define WIDTH 900\n#define HEIGHT 600\n#define FILENAME "south_korea_flag.png"\n\nint main() {\n    gdImagePtr im;\n    FILE *pngout;\n    int white, black, red, blue;\n\n    im = gdImageCreate(WIDTH, HEIGHT);\n\n    white = gdImageColorAllocate(im, 255, 255, 255);\n    black = gdImageColorAllocate(im, 0, 0, 0);\n    red = gdImageColorAllocate(im, 205, 0, 0);\n    blue = gdImageColorAllocate(im, 0, 56, 168);\n\n    // Background (white)\n    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);\n\n    // Blue Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);\n\n    // Red Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);\n\n  int circleX = 385;    // 圓心的 X 座標\n  int circleY = 262.5;   // 圓心的 Y 座標\n  int circleRadius = 75;     \n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);\n\n  int circleX2 = 515;    // 圓心的 X 座標\n\n int circleY2 = 337.5;\n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);\n\n  {\n\n\n  // 起點和終點位置\n\n  int startX = 340;    \n  // 線的起點 X 座標\n\n  int startY = 90;   \n  // 線的起點 Y 座標\n\n  int endX = 200;     \n  // 線的終點 X 座標\n\n  int endY = 260;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 270;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 210;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);\n\n  gdImageSetThickness(im, lineWidth +12);\ngdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);\n}\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);\n\ngdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 400, 734, 490, white);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 97;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 267;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 212, 734, 118, white);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 277;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 217;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);\n\n    gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);\n\n  }\n\n    // Save image\nFILE *outputFile = fopen("./../images/korea_flag.png", "wb");\nif (outputFile == NULL) {\n    fprintf(stderr, "Error opening the output file.\\n");\n    return 1;\n}\n  gdImagePngEx(im, outputFile, 9);\n      fclose(outputFile);\n      gdImageDestroy(im);\n      return 0;\n  } \n \n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'HW1', 'text': '', 'tags': '', 'url': 'HW1.html'}, {'title': '練習1', 'text': '', 'tags': '', 'url': '練習1.html'}, {'title': '1.輸入數字判斷高於平均身高或低於平均身高或處於平均', 'text': '#include <stdio.h>   // 包含標準輸入/輸出頭文件。\n\nvoid main()\n{\n    float PerHeight;   // 宣告一個浮點數變數 \'PerHeight\' 來儲存人的身高。\n\n    printf("輸入人的身高（以厘米為單位）：");   // 提示用戶輸入身高（以厘米為單位）。\n    scanf("%f", &PerHeight);   // 讀取並將用戶的輸入存儲在 \'PerHeight\' 中。\n\n    if (PerHeight < 150.0)   // 檢查 \'PerHeight\' 是否小於 150.0。\n        printf("這個人是矮子。\\n");   // 印出一條消息，指示這個人是矮子。\n    else if ((PerHeight >= 150.0) && (PerHeight < 165.0))   // 檢查 \'PerHeight\' 是否介於 150.0 和 165.0 之間。\n        printf("這個人身高屬於平均水平。\\n");   // 印出一條消息，指示這個人身高屬於平均水平。\n    else if ((PerHeight >= 165.0) && (PerHeight <= 195.0))   // 檢查 \'PerHeight\' 是否介於 165.0 和 195.0 之間。\n        printf("這個人是較高的。\\n");   // 印出一條消息，指示這個人身高較高。\n    else\n        printf("身高異常。\\n");   // 印出一條消息，指示身高異常。\n}\n \n \n', 'tags': '', 'url': '1.輸入數字判斷高於平均身高或低於平均身高或處於平均.html'}, {'title': '2.輸入攝氏度轉換華氏度', 'text': '#include <stdio.h>     // 包含標準輸入/輸出頭文件。\n\nfloat temp_f;     /* 華氏度 */\nfloat temp_c;     /* 攝氏度 */\nchar line_text[50];        /* 一行輸入 */\n\nint main() {\n    printf("輸入溫度（攝氏度）：");  // 提示用戶輸入攝氏溫度。\n    fgets(line_text, sizeof(line_text), stdin);      // 從用戶讀取一行輸入並存儲在 \'line_text\' 中。\n    sscanf(line_text, "%f", &temp_c);               // 將 \'line_text\' 中的輸入轉換為浮點數並存儲在 \'temp_c\' 中。\n\n    temp_f = ((9.0 / 5.0) * temp_c) + 32.0;         // 將攝氏溫度轉換為華氏溫度並存儲在 \'temp_f\' 中。\n    printf("%f degrees Fahrenheit.\\n", temp_f);    // 以華氏度打印溫度。\n\n    return(0);   // 返回0以表示程序成功執行。\n}\n \n \n', 'tags': '', 'url': '2.輸入攝氏度轉換華氏度.html'}, {'title': '3.用C語言函數獲取當前時間', 'text': '#define __STDC_WANT_LIB_EXT1__ 1/這一行是一個預處理器指令，用來啟用C標準庫的擴展功能。在這裡，它啟用了擴展函數 ctime_s\n#include <time.h>/這裡包含了標準的時間頭文件，其中包含了一些與時間相關的函數和結構。\n#include <stdio.h> /這裡包含了標準的輸入/輸出頭文件，以便使用 printf 函數輸出信息。\n\nint main(void)/這是程序的主函數的開始\n{\n    time_t result = time(NULL);/使用 time 函數獲取當前的時間，返回的結果存儲在 result 變數中。\n    printf("\\n%s\\n", ctime(&result));/ 使用 ctime 函數將時間轉換為可讀的字符串格式，並通過 printf 函數打印出來。\n#ifdef __STDC_LIB_EXT1__/這是一個條件編譯指令，用於檢查是否支持標準庫的擴展功能。\n    char time_str[26];\n    ctime_s(time_str,sizeof time_str,&result);/如果支持擴展功能，則使用 ctime_s 函數將時間轉換為可讀的字符串格式，並將結果存儲在 time_str 中。\n    printf("\\n%s\\n", time_str);/通過 printf 函數打印使用 ctime_s 轉換後的時間字符串。\n#endif\n} \n \n', 'tags': '', 'url': '3.用C語言函數獲取當前時間.html'}, {'title': '4.用 C 語言寫一個程式來列印目前日期和時間', 'text': '#include <time.h>\n#include <stdio.h>  \n#include <stdlib.h>\n\nint main(void)\n{\n    time_t cur_time;         // 定義一個 time_t 型變數 cur_time 來存儲當前時間。\n    char* cur_t_string;      // 定義一個指向字符的指針 cur_t_string，用來存儲轉換後的時間字符串。\n\n    cur_time = time(NULL);   // 使用 time 函數獲取當前時間，並將其存儲在 cur_time 變數中。\n\n    if (cur_time == ((time_t)-1))\n    {\n        // 如果獲取當前時間失敗，輸出錯誤信息並以失敗的狀態退出程序。\n        (void) fprintf(stderr, "無法獲取當前日期和時間。\\n");\n        exit(EXIT_FAILURE);\n    }\n\n    cur_t_string = ctime(&cur_time); // 將 cur_time 中的時間轉換為本地時間格式，並將結果存儲在 cur_t_string 中。\n\n    if (cur_t_string == NULL)\n    {\n        // 如果轉換時間失敗，輸出錯誤信息並以失敗的狀態退出程序。\n        (void) fprintf(stderr, "無法轉換當前日期和時間。\\n");\n        exit(EXIT_FAILURE);\n    }\n\n    // 通過 printf 函數輸出轉換後的時間字符串。\n    (void) printf("\\n當前時間為：%s\\n", cur_t_string);\n\n    // 退出程序，表示成功執行。\n    exit(EXIT_SUCCESS);\n}\n \n \n', 'tags': '', 'url': '4.用 C 語言寫一個程式來列印目前日期和時間.html'}, {'title': '5.輸入名字、姓氏及出生年份', 'text': '#include <stdio.h>    // 包含標準輸入/輸出頭文件。\n\nint main() {\n    char firstname[20], lastname[20];   // 宣告用於存儲名字和姓氏的字符數組，每個最大大小為20個字符。\n    int bir_year;   // 宣告一個整數變數 \'bir_year\' 來存儲出生年份。\n\n    printf("輸入您的名字：");   // 提示用戶輸入他們的名字。\n    scanf("%s", firstname);   // 讀取並將用戶的輸入存儲在 \'firstname\' 中。\n\n    printf("輸入您的姓氏：");   // 提示用戶輸入他們的姓氏。\n    scanf("%s", lastname);   // 讀取並將用戶的輸入存儲在 \'lastname\' 中。\n\n    printf("輸入您的出生年份：");   // 提示用戶輸入他們的出生年份。\n    scanf("%d", &bir_year);   // 讀取並將用戶的輸入存儲在 \'bir_year\' 中。\n\n    printf("%s %s %d\\n", firstname, lastname, bir_year);   // 打印名字、姓氏和出生年份。\n\n    return 0;   // 返回0以表示程序成功執行。\n}\n \n \n', 'tags': '', 'url': '5.輸入名字、姓氏及出生年份.html'}, {'title': '6.檢查數字是否為醜數', 'text': '# include <stdio.h>\n# include <string.h>\n\nint main()\n{\n    int n, x = 0;\n    printf("\\n\\n 檢查一個給定數字是否是醜數：\\n");\n    printf("----------------------------------------------------\\n");\n    printf("輸入一個整數數字：");\n    scanf("%d", &n);\n\n    if (n <= 0) {  \n        printf("輸入正確的數字。");  \n    }\n\n    while (n != 1) \n    {  \n        if (n % 5 == 0) \n        {  \n            n /= 5;  \n        } \n        else if (n % 3 == 0) \n        {  \n            n /= 3;  \n        } \n        else if (n % 2 == 0) \n        {  \n            n /= 2;  \n        } \n        else \n        {  \n            printf("它不是一個醜數。\\n"); \n            x = 1;  \n            break;  \n        }  \n    } \n\n    if (x == 0) \n    { \n        printf("它是一個醜數。\\n");\n    }\n    \n    return 0;\n}\n \n \n 7. 將公里每小時轉換為英哩每小時 \n #include <stdio.h>     // 包含標準輸入/輸出頭文件。\nfloat kmph;              /* 每小時公里數 */\nfloat miph;              /* 每小時英里數（將要計算的） */\nchar  line_text[50];      /* 來自鍵盤的一行輸入 */\n\nint main()\n{\n    printf("輸入每小時公里數：");   // 提示用戶輸入每小時公里數。\n    fgets(line_text, sizeof(line_text), stdin);   // 從用戶讀取一行輸入並將其存儲在 \'line_text\' 中。\n    sscanf(line_text, "%f", &kmph);   // 將輸入轉換為浮點數並存儲在 \'kmph\' 中。\n\n    miph = (kmph * 0.6213712);   // 將每小時公里數轉換為每小時英里數。\n    printf("%f 英里每小時\\n", miph);   // 將結果以英里每小時打印出來。\n\n    return 0;   // 返回0以表示程序成功執行。\n}\n \n \n', 'tags': '', 'url': '6.檢查數字是否為醜數.html'}, {'title': '8.顯示兩個整數變量', 'text': '#include <stdio.h>\nvoid main(void)\n{\n    int m = 10, n, o;\n    int *z = &m;\n\n    printf("\\n\\n 指針：展示指針的基本聲明：\\n");\n    printf("-------------------------------------------------------\\n");\n    printf(" 這裡有 m=10，n 和 o 是兩個整數變量，*z 是一個整數\\n");\n    printf("\\n\\n z 存儲 m 的地址 = %p\\n", z); // z 是一個指針，所以 %p 會印出地址\n    printf("\\n *z 存儲 m 的值 = %i\\n", *z);\n    printf("\\n &m 是 m 的地址 = %p\\n", &m); // &m 給出整數變量 m 的地址，所以 %p 是對應的格式符號\n    printf("\\n &n 存儲 n 的地址 = %p\\n", &n);\n    printf("\\n &o 存儲 o 的地址 = %p\\n", &o);\n    printf("\\n &z 存儲 z 的地址 = %p\\n\\n", &z); // &z 給出指針 z 的存儲地址，仍然是一個地址，%p 是正確的格式符號\n}\n \n \n', 'tags': '', 'url': '8.顯示兩個整數變量.html'}, {'title': '9.輸入1-10的整數查看哪個為正確', 'text': '#include<stdio.h>     // 包含標準輸入/輸出頭文件。\n#include<stdlib.h>    // 包含標準庫頭文件。\n#include<time.h>      // 包含時間頭文件，用於生成隨機數。\n\nint main ()           // 主函數的開始。\n{\n    int number, input;   // 宣告兩個整數變數 \'number\' 和 \'input\'。\n\n    srand ( time(NULL) );   // 使用當前時間初始化隨機種子。\n\n    number = rand() % 10 + 1;   // 生成一個介於1和10之間的隨機數並存儲在 \'number\' 中。\n\n    do {   // 開始一個do-while循環。\n        printf ("\\n猜測數字（1到10）：");   // 輸出提示用戶猜測數字的消息。\n        scanf ("%d", &input);    // 讀取用戶的輸入並存儲在 \'input\' 中。\n\n        if (number > input)   // 如果隨機數大於用戶的輸入。\n            printf ("該數字較大\\n");   // 輸出消息指示該數字較大。\n\n    } while (number != input);   // 只要用戶的輸入不等於隨機數，就繼續循環。\n\n    printf ("答對了！\\n\\n");   // 輸出消息指示用戶猜對了。\n\n    return 0;   // 返回0以表示程序成功執行。\n}   // 主函數的結尾。\n \n \n', 'tags': '', 'url': '9.輸入1-10的整數查看哪個為正確.html'}, {'title': '10.輸入任意數的平方', 'text': '#include <stdio.h>\n\ndouble square(double num)\n{\n    return (num * num);\n}\n\nint main()\n{\n    int num;\n    double n;\n\n    printf("\\n\\n 函數：計算任意數的平方 :\\n");\n    printf("------------------------------------------------\\n");\t\n\n    printf("輸入任意數以計算平方 : ");\n    scanf("%d", &num);\n\n    n = square(num);\n    printf("%d 的平方是 : %.2f\\n", num, n); \n\n    return 0;\n}\n \n \n \n \n', 'tags': '', 'url': '10.輸入任意數的平方.html'}, {'title': '練習2', 'text': '', 'tags': '', 'url': '練習2.html'}, {'title': '1.(||)運算元傳回值與 (&&) 一樣, 但不同的是, 當 (||) 運算元兩邊的運算子之值都為 0 時, 則會傳回 0, 否則傳回 1', 'text': '/* ====================\n   邏輯或運算子。\n==================== */\n#include <stdio.h>\n\nvoid main()\n{\n    printf("%d\\n", 1 || 0);\n    printf("%d\\n", 0 || 0);\n    printf("%d\\n", 2 || 2);\n}\n \n \n', 'tags': '', 'url': '1.(||)運算元傳回值與 (&&) 一樣, 但不同的是, 當 (||) 運算元兩邊的運算子之值都為 0 時, 則會傳回 0, 否則傳回 1.html'}, {'title': '2.sizeof( type ) 取得特定型別的 size', 'text': '/* ====================\n   sizeof 的範例。\n==================== */\n#include <stdio.h>\n\nvoid main()\n{\n    char a;\n    printf("int 的大小為 %d \\n", sizeof(int));\n    printf("char a 的大小為 %d \\n", sizeof(a));\n}\n \n \n', 'tags': '', 'url': '2.sizeof( type ) 取得特定型別的 size.html'}, {'title': '3.C 有3個邏輯運算元, 基本上常與條件判斷運算合用', 'text': '/* ====================\n   邏輯非運算子。\n==================== */\n#include <stdio.h>\n\nvoid main()\n{\n    int a;\n    a = 3;\n    printf("%d\\n", !a);\n    a = 0;\n    printf("%d\\n", !a);\n}\n \n \n', 'tags': '', 'url': '3.C 有3個邏輯運算元, 基本上常與條件判斷運算合用.html'}, {'title': '4.位元運算元', 'text': '/* ====================\n   位元運算子的範例。\n==================== */\n#include<stdio.h>\n\nvoid main()\n{\n    int a, b;\n    a = 15;\n    b = 1;\n\n    printf("%d \\n", a | b ); /* a OR b */\n    printf("%d \\n", a & b ); /* a AND b */\n    printf("%d \\n", a ^ b ); /* a XOR b */\n    printf("%d \\n", a << 1 ); /* a 位元左移 1 位 */\n    printf("%d \\n", a >> 1 ); /* a 位元右移一位 */\n    printf("%d \\n", ~a ); /* A 的補數運算 */\n}\n \n \n', 'tags': '', 'url': '4.位元運算元.html'}, {'title': '5.關係運算元', 'text': '/* ====================\n   關係運算子的範例。\n==================== */\n#include <stdio.h>\n\nint main()\n{\n    int a = 10, b = 5;\n\n    printf(" a == b 是 %d \\n", a == b);\n    printf(" a > b 是 %d \\n", a > b);\n    printf(" a < b 是 %d \\n", a < b);\n    printf(" a >= b 是 %d \\n", a >= b);\n    printf(" a <= b 是 %d \\n", a <= b);\n    printf(" a != b 是 %d \\n", a != b);\n\n    printf("\\n");\n\n    b = 10;\n\n    printf(" a == b 是 %d \\n", a == b);\n    printf(" a > b 是 %d \\n", a > b);\n    printf(" a < b 是 %d \\n", a < b);\n    printf(" a >= b 是 %d \\n", a >= b);\n    printf(" a <= b 是 %d \\n", a <= b);\n    printf(" a != b 是 %d \\n", a != b);\n\n    return 0;\n}\n \n \n', 'tags': '', 'url': '5.關係運算元.html'}, {'title': '6.算術運算元', 'text': '/* ====================\n   基本運算範例。\n==================== */\n#include<stdio.h>\n\nint main()\n{\n    int a, b;\n    a = 10; \n    b = 3;\n\n    printf("%d \\n", a * b );  /* 乘法 */\n    printf("%d \\n", a / b );  /* 除法 */\n    printf("%d \\n", a + b );  /* 加法 */\n    printf("%d \\n", a - b );  /* 減法 */\n    printf("%d \\n", a % b );  /* 取餘數 */\n\n    return 0;\n}\n \n \n', 'tags': '', 'url': '6.算術運算元.html'}, {'title': '7.C 的基本型態', 'text': '/* ====================\n   變數宣告的例子 2。\n==================== */\nint main()\n{\n    /* 變數宣告 */\n    int a;\n    int A;\n    int b, c;\n\n    a = 1;\n    A = 8;\n    b = 2;\n    c = A - a + b; /* 先計算 A - a + b，將結果傳回給 c */\n    printf("%d", c); /* 使用 printf 印出 c 這個整數型態的變數 */\n\n    return 0;\n}\n \n \n', 'tags': '', 'url': '7.C 的基本型態.html'}, {'title': '8.C 的基本型態', 'text': '/* ====================\n   變數宣告的例子 3。\n==================== */\n#include <stdio.h>\n\nint main()\n{\n    int a = 1;\n    int A = 8;\n    int b = 2, c;\n\n    c = A - a + b;\n\n    /* 輸出 a, A, b, c 到螢幕 */\n    printf("a = %d, A = %d, b = %d, c = %d ", a, A, b, c);\n\n    return 0;\n}\n \n \n', 'tags': '', 'url': '8.C 的基本型態.html'}, {'title': '9.C 的浮點數', 'text': '#include <stdio.h>\n\nvoid main()\n{\n    float a = 0.5;\n    double b = 1.2;\n    int c = 3;\n\n    b = b + a + c;\n\n    /* 輸出 a, b, c 到螢幕 */\n    printf(" a = %3.1f, b = %3.1f, c = %d ", a, b, c);\n}\n \n \n', 'tags': '', 'url': '9.C 的浮點數.html'}, {'title': '10.C 的輸出與輸入的函數', 'text': '/* =========================\n   輸入一個整數\n========================= */\n#include <stdio.h>\n\nint main()\n{\n    int i;\n    printf("輸入一個整數:");\n    scanf("%d", &i); /* 在變數 i 的前面加上 &（位址運算元） */\n    printf("輸入的數字是 %d", i);\n\n    return 0;\n}\n \n \n \n \n', 'tags': '', 'url': '10.C 的輸出與輸入的函數.html'}, {'title': 'w11', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nint main() {\n    int width = 800;\n    int height = 600;\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    FILE *outputFile = fopen("hellogd.png", "wb");\n    if (outputFile == NULL) {\n \nfprintf(stderr, "Error opening the output file.\\n");\n \nreturn 1;\n    }\n \n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);\n    // 畫直線\n    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);\n \n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width/4;\n    points[0].y = (int)height*3/4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n \n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width/3;\n    points2[0].y = (int)height/2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n \n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n} \n \n', 'tags': '', 'url': 'w11.html'}, {'title': 'w13', 'text': '// 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n\n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // Close the data file\n    fclose(outputFile);\n\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n} \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};